{"version":3,"sources":["resources/logo.png","Components/popup.js","App.js","Components/UserFunctions.js","serviceWorker.js","index.js"],"names":["module","exports","Popup","className","this","props","text","onClick","closePopup","React","Component","App","state","showPopup","email","errors","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","newEmail","axios","post","then","response","console","log","data","emails","_res","src","logo","alt","noValidate","type","placeholder","togglePopup","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,kC,+LCgB5BC,G,uLAXf,OACA,yBAAKC,UAAU,SACf,yBAAKA,UAAU,iBACf,wBAAIA,UAAU,kBAAkBC,KAAKC,MAAMC,MAC3C,4BAAQH,UAAU,cAAcI,QAASH,KAAKC,MAAMG,YAApD,e,GANoBC,IAAMC,Y,kCC0FTC,E,YArFb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,WAAW,EACXC,MAAO,GACPC,OAAQ,IAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBARJ,E,sEAWLE,GACPf,KAAKgB,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,U,+BAEnCJ,GAAI,IAAD,OACVA,EAAEK,kBCrBc,SAAAC,GACpB,OAAOC,IACJC,KAAK,4CAA6C,CACjDb,MAAOW,EAASX,QAEjBc,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAI,cACLF,EAASG,SDsBhBC,CANiB,CACfnB,MAAOV,KAAKQ,MAAME,QAKHc,MAAK,SAAAM,GAClB,OACA,yBAAK/B,UAAU,SACf,yBAAKA,UAAU,iBACf,4BAAK,EAAKE,MAAMC,MAChB,4BAAQC,QAAS,EAAKF,MAAMG,YAA5B,mB,oCAQJJ,KAAKgB,SAAS,CACTP,WAAYT,KAAKQ,MAAMC,c,+BAK5B,OACM,yBAAKV,UAAU,YACb,yBAAKA,UAAU,cACb,yBAAKgC,IAAKC,IAAMjC,UAAU,WAAWkC,IAAI,UAE3C,6BACE,uBAAGlC,UAAU,iBAAb,8LAEF,0BAAMmC,YAAU,EAACpB,SAAUd,KAAKc,UAC9B,wBAAIf,UAAU,cAAd,4BACA,yBAAKA,UAAU,uBACb,2BACEoC,KAAK,OACLpC,UAAU,aACVmB,KAAK,QACLkB,YAAY,mBACZjB,MAAOnB,KAAKQ,MAAME,MAClBE,SAAUZ,KAAKY,YAGnB,4BACET,QAASH,KAAKqC,YAAYxB,KAAKb,MAC/BmC,KAAK,SACLpC,UAAU,eAHZ,YAQGC,KAAKQ,MAAMC,UACZ,kBAAC,EAAD,CACEP,KAAK,wDACHE,WAAYJ,KAAKqC,YAAYxB,KAAKb,QAEtD,W,GA5EgBM,aEKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.a94bf02f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.812ff160.png\";","import React from 'react';\nimport '../App.css';\n\nclass Popup extends React.Component {\n  render() {\nreturn (\n<div className='popup'>\n<div className='popup\\_inner'>\n<h1 className=\"popupTextStyle\">{this.props.text}</h1>\n<button className=\"submitStyle\" onClick={this.props.closePopup}>Close</button>\n</div>\n</div>\n);\n}\n}\n\nexport default Popup;\n","import React, { Component } from 'react'\nimport Popup from './Components/popup'\nimport { emails } from './Components/UserFunctions'\nimport './App.css';\n\nimport logo from './resources/logo.png';\n\nclass App extends Component {\n    constructor() {\n      super()\n      this.state = {\n        showPopup: false,\n        email: '',\n        errors: {}\n      }\n      this.onChange = this.onChange.bind(this)\n      this.onSubmit = this.onSubmit.bind(this)\n    }\n\n    onChange(e) {\n      this.setState({ [e.target.name]: e.target.value })\n    }\n    onSubmit(e) {\n      e.preventDefault()\n\n      const newEmail = {\n        email: this.state.email\n      }\n\n      const descriptionText = \"FitFort helps Fitness Professionals/Personal Trainers sustain longer client relationships by making it easier to build personalized fitness plans and helping clients see their progress.\"\n\n      emails(newEmail).then(_res => {\n          return (\n          <div className='popup'>\n          <div className='popup\\_inner'>\n          <h1>{this.props.text}</h1>\n          <button onClick={this.props.closePopup}>close me</button>\n          </div>\n          </div>\n          );\n      })\n    }\n\n    togglePopup() {\n      this.setState({\n           showPopup: !this.state.showPopup\n      });\n       }\n\n    render() {\n      return (\n            <div className=\"appStyle\">\n              <div className=\"logoBucket\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </div>\n              <div>\n                <p className=\"overviewStyle\">FitFort helps Fitness Professionals/Personal Trainers sustain longer client relationships by making it easier to build personalized fitness plans and helping clients see their progress.</p>\n              </div>\n              <form noValidate onSubmit={this.onSubmit}>\n                <h1 className=\"App-header\">Signup for Fitfort Beta!</h1>\n                <div className=\"formContainterStyle\">\n                  <input\n                    type=\"text\"\n                    className=\"inputStyle\"\n                    name=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={this.state.email}\n                    onChange={this.onChange}\n                  />\n                </div>\n                <button\n                  onClick={this.togglePopup.bind(this)}\n                  type=\"submit\"\n                  className=\"submitStyle\"\n                >\n                Sign Up!\n                </button>\n\n                  {this.state.showPopup ?\n                  <Popup\n                    text='You have sucessfully registered for the Fitfort Beta!'\n                      closePopup={this.togglePopup.bind(this)}\n/>\n: null\n}\n              </form>\n            </div>\n      )\n    }\n  }\n\n\n\n  export default App\n","import axios from 'axios'\n\nexport const emails = newEmail => {\n  return axios\n    .post('https://fitfort.herokuapp.com/emailsignup', {\n      email: newEmail.email\n    })\n    .then(response => {\n      console.log('Registered')\n      return response.data\n    })\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}